/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
+ơ * and open the template in the editor.
 */
package gui;

import dao.impl.CategoryDaoImpl;
import dao.impl.CouponDaoImpl;
import dao.impl.DbConnection;
import dao.impl.EmployeeDaoImpl;
import dao.impl.Pro_coupDAOImpl;
import dao.impl.ProductDaoImpl;
import entity.ProductEntity;
import java.sql.Connection;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import static dao.impl.Pro_coupDAOImpl.*;
import entity.Bill_proEntity;
import entity.Pro_id_count;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author admin
 */
public class ProBill_Frm extends javax.swing.JFrame {

    private List<ProductEntity> lp;
    private CouponDaoImpl dcoup;
    private ProductDaoImpl dpro;
    private EmployeeDaoImpl demp;
    private Connection con;
    private CategoryDaoImpl dcate;
    private Pro_coupDAOImpl proCoup;

    /**
     * Creates new form AddListProductCoupon
     */
    public ProBill_Frm() {
        initComponents();
        con = DbConnection.getConnect();
        dcoup = new CouponDaoImpl(con);
        dpro = new ProductDaoImpl(con);
        demp = new EmployeeDaoImpl(con);
        dcate = new CategoryDaoImpl(con);
        lp = dpro.getAll();
        pro_id_count = new ArrayList<>();
        this.loadPro();
        this.loadProList();
    }

    private void loadPro() {
        DefaultTableModel model = new DefaultTableModel();
        Vector cols = new Vector();
        cols.add("Mã đơn hàng");
        cols.add("Pro Name");
        cols.add("Count");
        model.setColumnIdentifiers(cols);
        for (Bill_proEntity p : allBill_Pro) {
            Vector rows = new Vector();
            rows.add(p.getId());
            rows.add(dpro.getById(p.getPro_id()).getName());
            rows.add(p.getCount());
            model.addRow(rows);
        }
        proTable.setModel(model);
        msg.setText("");
    }

    private void loadProList() {
        DefaultTableModel model = new DefaultTableModel();
        Vector cols = new Vector();
        cols.add("Mã sản phẩm");
        cols.add("Tên sản phẩm");
        cols.add("Giá");
        cols.add("Hàng trong kho");
        model.setColumnIdentifiers(cols);
        for (ProductEntity p : lp) {
            if (p.getNow_count() != 0) {
                Vector rows = new Vector();
                rows.add(p.getId());
                rows.add(p.getName());
                rows.add(p.getPrice());
                rows.add(p.getNow_count());
                model.addRow(rows);
            }
        }
        productTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        proTable = new javax.swing.JTable();
        add = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        msg = new javax.swing.JLabel();
        loadpage = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        search = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resouce/icons8_delete_forever_30px_1.png"))); // NOI18N
        delete.setText("Trừ");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        proTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        proTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                proTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(proTable);

        add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resouce/icons8_add_30px.png"))); // NOI18N
        add.setText("Thêm vào đơn hàng");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resouce/icons8_ok_30px.png"))); // NOI18N
        btnSave.setText("Đóng");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        msg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        msg.setForeground(new java.awt.Color(255, 0, 0));

        loadpage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resouce/icons8_replay_30px.png"))); // NOI18N
        loadpage.setText("Load Page");
        loadpage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadpageActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(productTable);

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resouce/search.png"))); // NOI18N
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Danh sách sản phẩm trong kho hàng");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Sản phẩm trong đơn hàng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120)
                .addComponent(loadpage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(192, 192, 192))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(348, 348, 348))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(delete)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(loadpage, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.setVisible(false);

    }//GEN-LAST:event_btnSaveActionPerformed

    private void proTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proTableMouseClicked

    }//GEN-LAST:event_proTableMouseClicked

    private void loadpageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadpageActionPerformed
        this.loadPro();
        this.loadProList();
    }//GEN-LAST:event_loadpageActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if (productTable.getSelectionModel().isSelectionEmpty()) {
            msg.setText("Vui lòng chọn sản phẩm!");
        } else {
            int index = productTable.getSelectedRow();
            int proid = (Integer) productTable.getValueAt(index, 0);
            ProductEntity p = dpro.getById(proid);
            boolean checkabt = true;
            for (Bill_proEntity a : allBill_Pro) {
                if (a.getPro_id() == p.getId()) {
                    checkabt = false;
                    a.setCount(a.getCount() + 1);
                    break;
                }
            }
            if (checkabt) {
                allBill_Pro.add(new Bill_proEntity(p.getId(), 1));
            }
            boolean checkpc = true;
            for (Pro_id_count c : pro_id_count) {
                if (c.getPro_id() == p.getId()) {
                    checkpc = false;
                    c.setCount(c.getCount() + 1);
                    break;
                }
            }
            if (checkpc) {
                pro_id_count.add(new Pro_id_count(p.getId(), 1));
            }
            for (ProductEntity pre : lp) {
                if (pre.getId() == p.getId()) {
                    pre.setNow_count(pre.getNow_count() - 1);
                }
            }
            System.out.println(pro_id_count);
            System.out.println(allBill_Pro);
            this.loadPro();
            this.loadProList();
        }
    }//GEN-LAST:event_addActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (proTable.getSelectionModel().isSelectionEmpty()) {
            msg.setText("Vui lòng chọn đơn!");
        } else {
            int index = proTable.getSelectedRow();
            String name = (String) proTable.getValueAt(index, 1);
            int proid = 0;
            for (int i = 0; i < allBill_Pro.size(); i++) {
                if (allBill_Pro.get(i).getCount() > 0) {
                    if (dpro.getById(allBill_Pro.get(i).getPro_id()).getName().equals(name)) {
                        allBill_Pro.get(i).setCount(allBill_Pro.get(i).getCount() - 1);
                        proid = allBill_Pro.get(i).getPro_id();
                        break;
                    }
                } else {
                    proid = allBill_Pro.get(i).getPro_id();
                    allBill_Pro.get(i).setCount(allBill_Pro.get(i).getCount() - 1);
                    break;
                }
            }
            for (int i = 0; i < allBill_Pro.size(); i++) {
                if (allBill_Pro.get(i).getCount() == 0) {
                    allBill_Pro.remove(i);
                    break;
                }
            }
            boolean checkpc = true;
            if (pro_id_count.size() > 0) {
                for (int i = 0; i < pro_id_count.size(); i++) {
                    if (dpro.getById(pro_id_count.get(i).getPro_id()).getId() == proid) {
                        pro_id_count.get(i).setCount(pro_id_count.get(i).getCount() - 1);
                        checkpc = false;
                        break;
                    }
                }
            }
            if (checkpc) {
                pro_id_count.add(new Pro_id_count(proid, -1));
            }
            for (int i = 0; i < lp.size(); i++) {
                if (lp.get(i).getId() == proid) {
                    lp.get(i).setNow_count(lp.get(i).getNow_count() + 1);
                }
            }
            System.out.println(pro_id_count);
            System.out.println(allBill_Pro);
            this.loadPro();
            this.loadProList();
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String str = JOptionPane.showInputDialog(this, "Vui lòng nhập tên sản phẩm cần tìm: ");
        DefaultTableModel model = new DefaultTableModel();
        Vector cols = new Vector();
        cols.add("Mã sản phẩm");
        cols.add("Tên sản phẩm");
        cols.add("Giá");
        cols.add("Hàng trong kho");
        model.setColumnIdentifiers(cols);
        for (ProductEntity p : dpro.search(str)) {
            Vector rows = new Vector();
            rows.add(p.getId());
            rows.add(p.getName());
            rows.add(p.getPrice());
            rows.add(p.getNow_count());
            model.addRow(rows);
        }
        productTable.setModel(model);
    }//GEN-LAST:event_searchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton loadpage;
    private javax.swing.JLabel msg;
    private javax.swing.JTable proTable;
    private javax.swing.JTable productTable;
    private javax.swing.JButton search;
    // End of variables declaration//GEN-END:variables
}
